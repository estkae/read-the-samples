Write code to convert the given expression into reverse polish notation and check if the final expression is not empty.\n\nNote : The expression contains at least one number.\n\nExamples :\n\nInput : 1 + 2 * 3 Output : 2 * 3 + 1 Input : 5 / 3 Output : 2 Input : 7 + 3 * 4 Output : 2 * 3 + 4 + 7\n\nWe will use a stack to store the results of each operation and pop it back to restore the stack. The stack will be implemented using an array, where ‘push’ and ‘pop’ are defined as:\n\npush(x) : store the value x at the top of the stack pop() : remove the top element from the stack and return its value\n\nLet us first create an array of size N, where N is the maximum number of operations to be performed. All elements in the array will be initialized as zero.\n\npush(x) : Store the value x at the top of the stack.\n\npush(x) : Store the value x at the top of the stack. pop() : Remove the top element from the stack and return its value.\n\nNow, the problem can be reduced to convert each operation into a push and pop operation.\n\nWe will use a stack to store the results of each operation and pop it back to restore the stack. The stack will be implemented using an array, where ‘push’ and ‘pop’ are defined as:\n\npush(x) : store the value x at the top of the stack pop() : remove the top element from the stack and return its value\n\nLet us first create an array of size N, where N is the maximum number of operations to be performed. All elements in the array will be initialized as zero.\n\nWe will iterate from left to right in the expression, and do the following operations:\n\nPush a number on the stack. Pop a number from the stack and add it to the current element in the expression. If the current element is a number, we do step 1 and 2. If the current element is an operation, we push a new number on the stack and move to the next operation. If we reach the end of the expression, we pop a number from the stack and display it.\n\nBelow is the implementation of the above approach:\n\n\n\nC++ filter_none edit\n\nclose play_arrow link\n\nbrightness_4\n\ncode #include <iostream> using namespace std; int push( int x) { return stack[top].push(x); } int pop() { return stack[top].pop(); } int convertToRPN( char * expr) { int N = strlen (expr); stack[0] = 1; for ( int i = 1; i < N; i++) { int operation = expr[i]; if (operation == '+' ) push(stack[0] + stack[1]); if (operation == '*' ) push(stack[0] * stack[1]); if (operation == '/' ) push(stack[0] / stack[1]); if (operation == '^' ) push(stack[0] ^ stack[1]); if (operation == '!' ) push(!stack[0]); if (operation == '(' ) push(stack[0]); if (operation == ')' ) pop(); if (operation == '+' ) { if (stack[0] == stack[1]) pop(); else push(stack[0] + stack[1]); } if (operation == '*' ) { if (stack[0] == stack[1]) pop(); else push(stack["