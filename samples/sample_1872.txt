Tutorials and How to's ‎ > ‎ Creating Custom Types\n\nContents\n\nExtension Methods\n\nReturning Other Types\n\nWorking with Custom Types\n\nThis section will show you how to create a custom type that can be used in R# and add an extension method to it. To follow along with the examples you will need the following code that you will be extending:\n\npublic static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; }\n\nThe extension method will need to be able to take any AppState and determine if it matches any of the strings that are in the enumeration. To do this the extension method will use an operator in C# called Match. To use this operator you will need to import the System.Linq namespace:\n\npublic static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; } using System.Linq; public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; }\n\nNext you can add your extension method to this type by adding the following to the top of the file:\n\npublic static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static bool IsIn ( this AppState state, string value ) { return ( state.ToString ( ) .Equals ( value ) ) ; } } using System.Linq; public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static bool IsIn ( this AppState state, string value ) { return ( state.ToString ( ) .Equals ( value ) ) ; } }\n\nIf you had a lot of different types you could create another extension method for each type.\n\nReturning Other Types\n\nA great way to create a class that can be easily extended is to have it return a new class when you call it. To do this the class will need to have a constructor with at least one parameter that can be passed in from the outside world.\n\npublic static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } }\n\nThe extension method for the custom class will look a little different this time because you will have to specify the type of the state it is trying to return and pass in a parameter of the same type. Here is an example of what that could look like:\n\npublic static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } }\n\nThis type will now be able to return any ErrorPageState from the extension method:\n\npublic static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public const string PageError = "PageError" ; public const string ArticlePage = "ArticlePage" ; public static class ErrorPageState { public ErrorPageState ( ) { } } } public static class AppState { public const string HomePage = "HomePage" ; public"