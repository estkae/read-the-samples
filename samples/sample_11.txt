Working with an example - rotating through an array\n\nFor a number of years, I've been fascinated by the idea of writing code that can rotate through an array. Let's say I have the following array of numbers:\n\nvar myNumbers = [ 1, 2, 3, 4, 5 ];\n\nThe following snippet of code would display the same numbers in reverse order:\n\nfor ( var i = myNumbers.length - 1; i >= 0; i-- ) { console.log( myNumbers[i] ); }\n\nWhat's going on here?\n\nWe know that the index of an array can be used as a "pointer" to the location in memory that contains a particular item in an array. If the array myNumbers has five items, then myNumbers[0] , myNumbers[1] , myNumbers[2] , myNumbers[3] and myNumbers[4] will point to the values 1 , 2 , 3 , 4 and 5 respectively.\n\nIn the previous example, the code starts with the length of the array (5) and subtracts one from it. As we know that index 0 in an array contains the first item in the array, the previous code will execute the following steps:\n\nTake the length of the array (5) Subtract 1 (so we now have 4) Start at the index that contains the first item in the array (myNumbers[4] = 3) and run down the array until we reach the last item in the array (myNumbers[3] = 5)\n\nSo the above code will end up displaying the items in the array in reverse order, starting at index 4 and working backwards to index 0.\n\nAt this point, we have a good idea of how we can access the values in an array in a specific order, but how do we go the other way?\n\nIt would be great if we could simply use the same code as above, but add a "--" operator before the last number. That way, we could add a simple parameter to the code to control the range of numbers it will use.\n\nUnfortunately, we can't do that. While JavaScript will happily work with -- , it will also happily take -- in code and convert it to -1 , or the last number in an array. That's not going to do us any good, as we want the code to be flexible enough that we can work with a number that we specify as the range of numbers.\n\nSo let's look at a simple function that can give us the results we need.\n\nfunction rotate(numbers, direction, number) { numbers.reverse(); numbers.push(number); numbers.unshift(number); };\n\nThe rotate function above has three parameters, and will rotate the values in the numbers array.\n\nnumbers is the array we want to use.\n\ndirection is the parameter that allows us to choose whether we want the values to be rotated in the direction we specify. In this case, we've chosen direction to be either "right" or "left"\n\nnumber is the number we're using as the upper bound of the range that we want to use.\n\nLet's take a look at a simple example:\n\nvar numbers = [ 1, 2, 3, 4, 5 ]; rotate( numbers, "right" ); console.log( numbers ); //output: [ 1, 2, 3, 4, 5 ]\n\nAs we can see, the numbers array is simply rotated right by the number we specified. That's fine, but let's add in some code that we can use to control which numbers are displayed:\n\nvar numbers = [ 1, 2, 3, 4, 5 ]; rotate( numbers, "right", 1 ); console.log( numbers ); //output: [ 1, 4, 3, 5, 2 ]\n\nWe can see that we've rotated the numbers so that the first number in the array is now number 1 , and the next number in the array is 4 .\n\nWe've also specified that we want to rotate in a right-handed manner, by passing "right" as the second parameter. This means that we have access to the following rotation values:\n\nrotate( numbers, "left" ); rotate( numbers, "right" ); rotate( numbers, "right" ); rotate( numbers, "right" ); rotate( numbers, "left" );\n\nIf we try to access the rotate function with "left" as the parameter, we'll see the following output:\n\nvar numbers = [ 1, 2, 3, 4, 5 ]; rotate( numbers, "left" ); console.log( numbers ); //output: [ 4, 3, 5, 2, 1 ]\n\nNot quite what we wanted, right?\n\nWhat we want is to be able to take an array, specify the number of numbers we want to display, and be able to choose the direction of rotation.\n\nWe also want to ensure that the values we are displaying are always within the array's bounds, and we're using them correctly.\n\nThe good news is that it's not too difficult to do this. We simply need to know what we want the code to look like, and write the code to do what we want it to do.\n\nLet's take a look at some simple code to display the numbers in an array in a given direction:\n\nfunction rotateArray( numbers, direction, startAt ) { numbers.reverse(); numbers.push( startAt ); numbers.unshift( startAt ); };\n\nrotateArray function\n\nThis is the code we'll use to display the numbers in the numbers array in the direction we specify. We'll start with a simple parameter:\n\nstartAt is the number we're displaying. It can either be the first number in the array, or any number within the array.\n\nLet's take a look at the code again:\n\nfunction rotateArray( numbers, direction, startAt ) { numbers.reverse(); numbers.push( startAt ); numbers.unshift( startAt ); };\n\nUsing this simple function, we can take any number of numbers, and display them in the direction we want. Let's look at a quick example:\n\nvar numbers = [ 1, 2, 3, 4, 5 ]; rotateArray( numbers, "left", 3 ); console.log( numbers ); //output: [ 4, 3, 5, 2, 1 ]\n\nThis time, we've used "left" as the direction, and we've also used the parameter "3" as the startAt value. The result is that we now have the numbers displayed in the array starting at the number 3 .\n\nIf we use a number that isn't within the bounds of the array, we'll get the following result:\n\nvar numbers = [ 1, 2, 3, 4, 5 ]; rotateArray( numbers, "right", 3 ); console.log( numbers ); //output: [ 5, 2, 4, 1, 3 ]\n\nAs you can see, the direction we've specified is "right", and the value we've specified for startAt is 3 . Unfortunately, this value isn't within the bounds of the array, so the values in the array have been displayed starting from the last number in the array.\n\nLet's take a look at how we can use this code to work with a number that's outside the bounds of the array:\n\nvar numbers = [ 1, 2, 3, 4, 5 ]; rotateArray( numbers, "right", 6 ); console.log( numbers ); //output: [ 5, 2, 4, 1, 3 ]\n\nThis time, we've specified "right" as the direction, and a value of 6 as the startAt parameter. The result is that we now have the values displayed in the array starting at the number 6 .\n\nThis time, the result we want is displayed in the array, but there's a problem. We don't want the number 6 to be the start of the array. Instead, we want it to be the last number in the array.\n\nThe good news is that we can easily handle this by modifying the code slightly:\n\nfunction rotateArray( numbers, direction, startAt ) { numbers.reverse(); numbers.push( startAt ); numbers.unshift( startAt ); };\n\nUsing the simple rotation code above, we can now take any array, specify the number we want to display, and choose the direction we want to use. This means we can write some simple code that can work with any number, regardless of its position in the array.\n\nThe next step is to write some code that can ensure the number we specify as the startAt is in the range that we expect.\n\nLet's take a look at how we can do that:\n\nfunction rotateArray( numbers, direction, startAt ) { if( startAt >= numbers.length ) { throw new RangeError("Start at is outside of the"