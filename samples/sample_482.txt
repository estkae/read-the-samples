// Use of this source code is governed by a BSD-style license that can be\n\n// Check if the field is initialized or not\n\n// Determine the kind of path to use\n\n// Generate the path from the module name, directory and field name.\n\n// Module name comes first, to keep a consistant ordering between native\n\n// native method code and java/native method code, to allow for more readable\n\n// Remove 'this' parameter from the function declaration\n\n// If the arguments are references (ie. the passed in argument is a local\n\n// variable), mark the parameter as read only.\n\n// If there is a non-factory constructor, use it\n\n// Always use the default constructor\n\n// A non-null `type` value, or `value` with a type annotation,\n\n// means that we are constructing a type.\n\n// Use the native constructor if it exists, otherwise fall back to\n\n// Use the name of the class as the default constructor name.\n\n// Check if a constructor exists on the type\n\n// If the value is a reference, use the name of the field.\n\n// Use the default constructor name for a value.\n\n// If the value is a reference, use the name of the field.\n\n// If a type is specified (name or value), it takes precedence.\n\n// If we have a type annotation on the parameter, it must match the type\n\n// If we have a name annotation on the parameter, it must match the name\n\n// Use the name of the class as the constructor name\n\n// If we have a type annotation on the parameter, it must match the type\n\n// If we have a name annotation on the parameter, it must match the name\n\n// Don't check for annotation matches in constructors.\n\n// Try to use the field name as a constructor name\n\n// If there is a non-factory method, use it\n\n// Always use the default constructor\n\n// A non-null `type` value, or `value` with a type annotation,\n\n// means that we are constructing a type.\n\n// Use the native constructor if it exists, otherwise fall back to\n\n// Use the name of the class as the default constructor name.\n\n// Check if a constructor exists on the type\n\n// If the value is a reference, use the name of the field.\n\n// Use the default constructor name for a value.\n\n// If the value is a reference, use the name of the field.\n\n// If a type is specified (name or value), it takes precedence.\n\n// If we have a type annotation on the parameter, it must match the type\n\n// If we have a name annotation on the parameter, it must match the name\n\n// Use the name of the class as the constructor name\n\n// If we have a type annotation on the parameter, it must match the type\n\n// If we have a name annotation on the parameter, it must match the name\n\n// Don't check for annotation matches in constructors.\n\n// Try to use the field name as a constructor name\n\n// If there is a non-factory method, use it\n\n// Always use the default constructor\n\n// A non-null `type` value, or `value` with a type annotation,\n\n// means that we are constructing a type.\n\n// Use the native constructor if it exists, otherwise fall back to\n\n// Use the name of the class as the default constructor name.\n\n// Check if a constructor exists on the type\n\n// If the value is a reference, use the name of the field.\n\n// Use the default constructor name for a value.\n\n// If the value is a reference, use the name of the field.\n\n// If a type is specified (name or value), it takes precedence.\n\n// If we have a type annotation on the parameter, it must match the type\n\n// If we have a name annotation on the parameter, it must match the name\n\n// Use the name of the class as the constructor name\n\n// If we have a type annotation on the"