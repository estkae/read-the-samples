The Canonical Path for Classes\n\nLast Updated on Wed, 04 Jan 2016 | Excel 2003 VBA\n\nWhen you create a class module, you must specify the following items in the declaration:\n\n■ The class name\n\n■ The objects that are instances of the class\n\n■ The properties that the class will support\n\n■ The methods that the class will support\n\n■ The events that the class will support\n\nAll classes in Excel derive from a generic base class called Object, which is an instance of the class of the same name. The Object class is an abstract class and doesn't have a constructor. If you don't have any idea what I'm talking about here, don't worry about it for now. I'll explain it in detail in Chapter 5. You can't instantiate an object from the Object class, so the only real purpose of the Object class is to serve as a base class for other classes. You can think of the Object class as being like a template that all other classes derive from. If you want to learn more about how classes work and how you can customize Excel's classes to create your own customized classes, check out my Microsoft Press book Microsoft Excel VBA and Macros (ISBN 0-7356-1845-0).\n\nWhen you create a class module in your Excel application, you must specify the class name as a string literal. For example, if you create a class module called Class1, Excel uses the following syntax in the declarations area of the class module to specify the name of the class:\n\nPublic Class Class1 End Class\n\nAs with any other module in Excel, a class module doesn't do anything until you create an object from the class module. Creating an object is a two-step process: You first instantiate the object, and then you call the methods and properties of the object. For example, to create an object from the class named Class1, you use the following code:\n\nDim obj1 As New Class1\n\nOnce you create an instance of the object, you can call the methods and properties of the object by preceding the method or property name with the name of the object. For example, if you created an instance of the class named Class1, you would use the following code to call the method named Display:\n\nobj1.Display\n\nIf the object contains an object variable that represents another object of the same class, you can also call the methods of that object. For example, if the object named obj1 created in the preceding code contained an object variable named obj2 that represented another object of the same class, you would use the following code to call the Display method of the object named obj2:\n\nobj1.obj2.Display\n\nThe property and method names of a class are preceded by the name of the class, as shown in the preceding examples.\n\nIf you create a class module that contains a custom collection object, such as a collection of cells in a worksheet, you must use a new operator to create the collection object. For example, the following statement creates a collection object named myCol1 that is a collection of worksheet cells:\n\nDim myCol1 As New Collection\n\nWhen you create a collection object, you specify the type of object that the collection can contain when you define the type of the collection.\n\nFor example, the following statement creates a collection object that can contain only the cells in a worksheet:\n\nDim myCol1 As New Collection(Worksheet.Range)\n\nWhen you create a collection object, you can add items to the collection object by using the Add method of the collection object.\n\nFor example, the following statement adds a range named "Region" to the collection object named myCol1:\n\nmyCol1.Add mySheet.Range("Region")\n\nThe Add method takes two arguments:\n\n■ The object that you want to add to the collection object\n\n■ The collection that you want to add the object to\n\nWhen you create a collection object, you can add an object to a collection object that is an instance of a different class, but the type of the objects in the collection must be the same.\n\nThe following code example adds the range named "Region" to the collection object named myCol1. This code example assumes that you've created the objects in the declaration section of the class module.\n\nSub AddObjectToCollection() Dim myCol1 As New Collection(Worksheet.Range) Dim myRow As Long, myColumn As Long Dim strName As String ' Obtain a reference to the collection ' that contains the first worksheet in ' the active workbook. Set myCol1 = Sheets(1).Range(1, 1). _ SpecialCells(xlCellTypeVisible) ' Initialize the name of the cell ' to the value of the Name property. strName = myCol1.Cell(1, 1).Value ' Determine the address of the cell ' and store it in the myRow and myColumn ' variables. myRow = myCol1.Cell(1, 1).Address myColumn = myCol1.Cell(1, 2).Address ' Create a new Range object. Set myRange = Worksheets("Sheet1"). _ Range("Region") ' Add the new range to the collection. myCol1.Add myRange End Sub\n\nThe following code example calls the AddObjectToCollection method to add the range named "Region" to the collection object named myCol1. This code example assumes that you've created the objects in the declaration section of the class module.\n\nSub AddObjectToCollectionWithMethodCall() Dim myCol1 As New Collection(Worksheet.Range) Dim myRow As Long, myColumn As Long Dim strName As String ' Obtain a reference to the collection ' that contains the first worksheet in ' the active workbook. Set myCol1 = Sheets(1).Range(1, 1). _ SpecialCells(xlCellTypeVisible) ' Initialize the name of the cell ' to the value of the Name property. strName = myCol1.Cell(1, 1).Value ' Determine the address of the cell ' and store it in the myRow and myColumn ' variables. myRow = myCol1.Cell(1, 1).Address myColumn = myCol1.Cell(1, 2).Address ' Create a new Range object. Set myRange = Worksheets("Sheet1"). _ Range("Region") ' Add the new range to the collection. myCol1.AddObject myRange ' Add another range to the collection ' and display the number of elements in the collection. myCol1.Add myRange MsgBox myCol1.Count End Sub\n\nThe final statement in the AddObjectToCollectionWithMethodCall subroutine is a good example of how you can use a method that belongs to a class to call the methods of the collection object.\n\n0 0