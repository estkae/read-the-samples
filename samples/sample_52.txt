"If you’re working on a SharePoint app, you’ll eventually need to get hold of a SharePoint context. At the time of this writing, there are two options: SharePointContext and SPUtility. Both work fine, and I think it’s really up to your personal preference and comfort level to choose either. But for my purposes, I’m a fan of using SharePointContext because it will use the most current context available, which is what I like to do.\n\nLet’s take a quick look at the two SharePoint context providers that we have at our disposal: SharePointContext and SPUtility. We’ll use these in conjunction with the new SharePoint REST API to get a SharePoint context.\n\nSharePointContext\n\nThe SharePointContext class represents a SharePoint context. The context is the central part of the SharePoint client object model, and it’s available from any client, including SharePoint-hosted, remote, or SharePoint-hosted-remote applications.\n\nTo create a SharePointContext object, you call the SharePointContext.GetContextAsync() method and pass in a SharePointContextOptions object. The SharePointContextOptions object provides the user information and authentication settings. We’ll dive into the details in the “Authorization” section of this article.\n\nOnce you have your context, you can then call methods on it. The context has a number of methods on it to retrieve different information.\n\nLet’s take a quick look at the available methods:\n\nGetContextAsync() - The method that is used to create the context.\n\n\n\n- The method that is used to create the context. SharePointContextPermission - The property that contains the permission token used to retrieve the current user.\n\n\n\n- The property that contains the permission token used to retrieve the current user. SharePointPermissions - The property that contains the current permission level of the user.\n\n\n\n- The property that contains the current permission level of the user. ListPermissions - The property that contains the permission level for the user to access lists.\n\n\n\n- The property that contains the permission level for the user to access lists. SPHostUrl - The property that contains the URL of the current host application.\n\n\n\n- The property that contains the URL of the current host application. Site - The property that contains the current site of the user.\n\n\n\n- The property that contains the current site of the user. UserPrincipalName - The property that contains the username of the current user.\n\n\n\n- The property that contains the username of the current user. Web - The property that contains the current web of the user.\n\n\n\nSPUtility\n\nThe SPUtility class provides static methods to retrieve a SharePoint context and return it. To get the context, you call the SPUtility.GetSharePointContext() method.\n\nThe methods you have available on the SPUtility.SharePointContext object are:\n\nClientContext\n\n\n\nWeb\n\n\n\nGetClientContext()\n\n\n\nGetWeb()\n\n\n\nSharePointContext Permission\n\nBefore we dive into the SharePoint context, let’s talk about permission. The SharePoint context is going to be pretty useless without a permission token. We’re going to talk about this permission token a lot in this article, so let’s just take a quick look at how it’s generated.\n\nWe’ll need to use the SharePoint permissions provider to generate the token. To do so, you’ll need to call the SharePointPermissionManager.GetPermissionsAsync() method. You’ll need to pass in an instance of the site where you want the permissions for.\n\nIn this example, we’re going to call GetPermissionsAsync() and get the current user’s permissions.\n\nGetPermissionsAsync() returns a SharePointPermissions object, which you can use to set your permissions on lists, folders, and documents. The SharePoint permissions are applied in a single pass. This means that you can’t apply different permissions to different entities. For example, if you want to apply permissions on the web, the site, and the lists and folders, you’ll need to pass in the permission on the web, then on the site, then on the lists and folders. You can, however, pass in different permissions to different lists and folders.\n\nOne other thing to note about SharePoint permissions is that they only grant access to the web, not to the list or to the folder itself.\n\nFor example, if a user doesn’t have the Edit permission to a list, he will still be able to view it. But if the user has the Edit permission to the list, he will be able to edit it.\n\nIf you want to deny access to the whole list, you can set the permissions for the list and all its subfolders to Deny.\n\nIn order to create the context, we’ll use the context, the SharePoint permissions provider, and a helper class, which we’ll talk about later in the article. The full example is shown in Listing 1.\n\nThe context object will now be passed to the constructor of a class called FileRootsProvider. The FileRootsProvider class is part of a helper class that I wrote and will be available to you in this article.\n\nThe provider will be created with the context and then called to generate the access token. Once the access token is generated, it will be returned to us, and we can start to retrieve information about the site and its lists and folders.\n\nAccess Token\n\nWhen you call the SharePoint permissions provider, you’ll receive a token that represents the permissions for the current user. The token is returned as a SharePointPermissions object, which is what we’ll use to apply the permissions.\n\nTo create a SharePointPermissions object, you need to pass in the site URL where the permissions should apply. For our example, we’ll pass in the site URL to the SharePointPermissions constructor.\n\nAfter you’ve created the permissions, you can apply them to the lists and folders. You can do this by passing in an instance of a list or folder to the SharePointPermissions constructor. If you want to apply permissions to all lists and folders, you can simply pass in an empty list or folder.\n\nNow that we’ve created the permissions, we can use the FileRootsProvider class to generate the access token. The access token is returned as a SharePointContextPermissions object. The SharePointContextPermissions object contains the permission token and other details that we’ll use to get information from the SharePoint site.\n\nAs you can see, the code to get the access token is pretty straightforward. The example is shown in Listing 2.\n\nList\n\nGetting the access token isn’t all you need to do. You also need to be able to get a list and get a list item. To do this, you’ll need to call the SharePointContext.GetListAsync() method. The method is easy to use and returns a list object.\n\nIf you’re looking for a specific list, you can pass in the list GUID or the URL of the list. Listing 3 shows an example of both the URL and GUID to get the lists from.\n\nItems\n\nThe code to get an item from a list is just as easy as getting the list. You can pass in the list item GUID to the GetListItemAsync() method. Listing 4 shows an example of how to get the list item with the GUID.\n\nSummary\n\nThis article was a quick look at how to get a SharePoint context. The examples used a helper class that I created to make it a little easier to get access to lists and items from SharePoint.