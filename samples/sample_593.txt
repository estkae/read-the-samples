\n\nnew file mode 100644\n\nindex 0000000..8a9b6e4\n\n--- /dev/null\n\n+++ b/ diff --git a/block/block.c b/block/block.cnew file mode 100644index 0000000..8a9b6e4--- /dev/null+++ b/ block/block.c @@ -0,0 +1,269 @@ +/* + * Copyright (C) 2006 ARM Limited + * Copyright (C) 2010 Freescale Semiconductor, Inc. + * + * See file CREDITS for list of people who contributed to this + * project. + * + * This program is free software; you can redistribute it and/or + * modify it under the terms of the GNU General Public License as + * published by the Free Software Foundation; either version 2 of + * the License or (at your option) any later version. + * + * This program is distributed in the hope that it will be useful, + * but WITHOUT ANY WARRANTY; without even the implied warranty of + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the + * GNU General Public License for more details. + * + * You should have received a copy of the GNU General Public License + * along with this program; if not, write to the Free Software + * Foundation, Inc., 59 Temple Place, Suite 330, Boston, + * MA 02111-1307 USA + * + */ + +#include <common.h> +#include <net.h> +#include <nvram.h> +#include <fw_def.h> +#include <hw_base.h> +#include <linux_compat.h> +#include <console.h> +#include <delay.h> +#include <string.h> +#include <version.h> +#include <cmdline.h> +#include <dram.h> +#include <bootinfo.h> +#include <nvram_common.h> +#include <leds.h> +#include <pci.h> +#include <io.h> +#include <u-boot.h> +#include <usb.h> +#include <sysdep.h> +#include <cpu.h> +#include <pm.h> +#include <spi.h> +#include <mmc.h> +#include <serial.h> +#include <wdt.h> +#include <fec.h> +#include <mmc_block.h> +#include <plat_common.h> +#include <version_info.h> + +#include <board.h> + +struct boot_mode { + uint32_t active; + uint32_t size; +}; + + +uint16_t arm11mpcore_read_dr(void *opaque, target_phys_addr_t offset) +{ + return (FEC_DR_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_mdr(void *opaque, target_phys_addr_t offset) +{ + return (FEC_MDR_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_irqstat(void *opaque, target_phys_addr_t offset) +{ + return (FEC_IRQSTAT_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_irqstat_all(void *opaque, target_phys_addr_t offset) +{ + return (FEC_IRQSTAT_ALL_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_cccr(void *opaque, target_phys_addr_t offset) +{ + return (FEC_CCCR_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_pci_cfg_cmd(void *opaque, target_phys_addr_t offset) +{ + return (FEC_PCI_CFG_CMD_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_gic_cache_config(void *opaque, target_phys_addr_t offset) +{ + return (FEC_GIC_CACHE_CONFIG_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_gic_cache_config_0(void *opaque, target_phys_addr_t offset) +{ + return (FEC_GIC_CACHE_CONFIG_0_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_gic_cache_config_1(void *opaque, target_phys_addr_t offset) +{ + return (FEC_GIC_CACHE_CONFIG_1_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_gic_cache_config_2(void *opaque, target_phys_addr_t offset) +{ + return (FEC_GIC_CACHE_CONFIG_2_MASK_READ(offset)); +} + +uint16_t arm11mpcore_read_gic_cache_config_3(void *opaque, target_phys"