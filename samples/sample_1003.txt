Easily build powerful user management, authentication, and authorization into your web and mobile applications. Download this Forrester report on the new landscape of Customer Identity and Access Management, brought to you in partnership with Stormpath .\n\nSome of you may know the Flyway by now. It’s a simple but powerful database migration tool that allows developers to work with a database in a more agile way. So we wanted to start working with Flyway in our projects too. We’ve developed a Flyway Maven plugin to make it easier to work with Flyway in a Maven project. It allows you to execute the Flyway scripts from the build, test or packaging phases of the Maven build lifecycle. So you can execute your database migration scripts automatically during the build.\n\nIf you’ve already used Flyway in your project, you know that there are a couple of ways to integrate Flyway into your project. There are three ways to use Flyway with Maven. The most common way is to use a simple .sql script. You can execute that script with a separate Maven command, but that doesn’t work very well for incremental builds. Another option is to call a Java method to execute your migration scripts. This also works quite well, but can become difficult when you want to write custom scripts. In our case, we want to build an Android app which means we can’t use Java. Instead, we need to use some sort of build script to execute our migrations. This is where Flyway comes in.\n\nFlyway is a very simple tool and is easy to use. It just requires a couple of extra steps to make it work properly with Maven. The first step is to execute the migration script from a build script. This is done by calling the FlywayRunner. There are a couple of different ways to use it. You can just pass in a path to the script and execute it, or pass in the Flyway Configuration and run it with the specific options. So you could either execute all your migration scripts from one build step or use a different build step for each migration script. The second step is to integrate the Maven build into the process. We do this by adding an extra plugin to our build.\n\nLet’s have a look at how to use Flyway in a Maven project. We’ll start by creating a simple Maven project. We won’t include any source code in this example. Instead, we’ll just use an existing database. We’ll use a simple H2 database which can be downloaded for free from http://h2database.com. Download and extract the zip file and you should see the following directory structure.\n\nNow let’s add our database to our Maven project. This is done by adding a new Maven artifact to our pom.xml. So add a new maven-dependency to our pom.xml.\n\n<dependency> <groupId>com.h2database</groupId> <artifactId>h2</artifactId> <version>1.4.187</version> </dependency>\n\nThis will pull the h2 database into our project and put it into the test-jar/lib directory. So now we have a database to use in our migration scripts.\n\nNext, we’ll add the Flyway Maven plugin to our pom.xml.\n\n<build> <plugins> <plugin> <groupId>org.flywaydb</groupId> <artifactId>flyway-maven-plugin</artifactId> <version>2.1.0.RC2</version> </plugin> </plugins> </build>\n\nNow that we’ve added the plugin, we’ll need to add a couple of extra dependencies. First we’ll add the extra Flyway dependencies. These are required to run the Flyway Maven plugin."