It is possible that you may not want your users to have the ability to make certain changes to the data that is being tracked. For example, you may want to track a list of servers, but you don't want your users to be able to add servers, remove servers, or make any other changes to the server list.\n\nThe answer to this problem is to use triggers. You can create triggers that run when a particular type of change is made to the data, and it is possible to make these triggers prevent the data from being changed.\n\nTo create a trigger, you can use the command-line function sqlt. For example, you could write a trigger that prevents a user from removing a particular field from the database.\n\nHere is an example of how you might create a trigger that prevents a user from removing the server_name field from the list of servers:\n\n[mars@luna src]$ sql --user=alena --password=huh --default-access=READ --tables=ListOfServers,ListOfIPAddresses --echo CREATE TABLE ListOfServers(name TEXT); CREATE TABLE ListOfIPAddresses(ip_address TEXT); CREATE TRIGGER server_name_deletion_not_allowed ON ListOfServers FOR DELETE AS BEGIN RAISE INFO 'You may not delete the field server_name'; END; SELECT * FROM ListOfServers; name ---------- nameserver1 nameserver2 name ---------- nameserver1 name ---------- nameserver2\n\nThe SQL statement you would use to drop the trigger would look like this:\n\n[mars@luna src]$ sql --user=alena --password=huh --default-access=READ --tables=ListOfServers,ListOfIPAddresses --echo DROP TRIGGER server_name_deletion_not_allowed ON ListOfServers; DROP TRIGGER server_name_deletion_not_allowed ON ListOfServers;\n\nNotice that we used the same SQL statement to create and drop the trigger. This is a powerful feature of SQL, which allows you to control exactly when a particular change will occur.\n\nFor example, if you want to remove the server_name field from the database, but you want to retain the data that has already been entered, you could write the trigger as follows:\n\nCREATE TRIGGER server_name_deletion_not_allowed ON ListOfServers FOR DELETE AS BEGIN RAISE INFO 'You may not delete the field server_name'; IF (@old.server_name <> @new.server_name) BEGIN INSERT INTO ListOfIPAddresses VALUES (@old.server_name, NULL); UPDATE ListOfServers SET server_name = NULL WHERE server_name = @old.server_name; END; END;\n\nYou would then delete the field, as follows:\n\n[mars@luna src]$ sql --user=alena --password=huh --default-access=READ --tables=ListOfServers,ListOfIPAddresses --echo DELETE server_name FROM ListOfServers; DELETE server_name FROM ListOfServers;\n\nThis example uses the triggers to prevent data from being deleted, but you can use triggers to make other changes as well. You can use the following table to help you determine which commands should be used to insert and delete information:\n\nSQL Command Insert Insert into table Insert into table columns Update Update table Update table columns Delete Delete table Delete table columns